# ‰Ω†Ë¶ÅÂºÄÂèë‰∏ÄÂ∫ßÈáëÁüøÔºåÂú∞Ë¥®ÂãòÊµãÂ≠¶ÂÆ∂Â∑≤ÁªèÊé¢Êòé‰∫ÜËøôÂ∫ßÈáëÁüø‰∏≠ÁöÑËµÑÊ∫êÂàÜÂ∏ÉÔºåÂπ∂Áî®Â§ßÂ∞è‰∏∫ m * n ÁöÑÁΩëÊ†º grid ËøõË°å‰∫ÜÊ†áÊ≥®„ÄÇÊØè‰∏™ÂçïÂÖÉÊ†º‰∏≠ÁöÑÊï¥Êï∞Â∞±Ë°®Á§∫Ëøô‰∏ÄÂçïÂÖÉÊ†º‰∏≠ÁöÑÈªÑ
# ÈáëÊï∞ÈáèÔºõÂ¶ÇÊûúËØ•ÂçïÂÖÉÊ†ºÊòØÁ©∫ÁöÑÔºåÈÇ£‰πàÂ∞±ÊòØ 0„ÄÇ 
# 
#  ‰∏∫‰∫Ü‰ΩøÊî∂ÁõäÊúÄÂ§ßÂåñÔºåÁüøÂ∑•ÈúÄË¶ÅÊåâ‰ª•‰∏ãËßÑÂàôÊù•ÂºÄÈááÈªÑÈáëÔºö 
# 
#  
#  ÊØèÂΩìÁüøÂ∑•ËøõÂÖ•‰∏Ä‰∏™ÂçïÂÖÉÔºåÂ∞±‰ºöÊî∂ÈõÜËØ•ÂçïÂÖÉÊ†º‰∏≠ÁöÑÊâÄÊúâÈªÑÈáë„ÄÇ 
#  ÁüøÂ∑•ÊØèÊ¨°ÂèØ‰ª•‰ªéÂΩìÂâç‰ΩçÁΩÆÂêë‰∏ä‰∏ãÂ∑¶Âè≥Âõõ‰∏™ÊñπÂêëËµ∞„ÄÇ 
#  ÊØè‰∏™ÂçïÂÖÉÊ†ºÂè™ËÉΩË¢´ÂºÄÈááÔºàËøõÂÖ•Ôºâ‰∏ÄÊ¨°„ÄÇ 
#  ‰∏çÂæóÂºÄÈááÔºàËøõÂÖ•ÔºâÈªÑÈáëÊï∞ÁõÆ‰∏∫ 0 ÁöÑÂçïÂÖÉÊ†º„ÄÇ 
#  ÁüøÂ∑•ÂèØ‰ª•‰ªéÁΩëÊ†º‰∏≠ ‰ªªÊÑè‰∏Ä‰∏™ ÊúâÈªÑÈáëÁöÑÂçïÂÖÉÊ†ºÂá∫ÂèëÊàñËÄÖÊòØÂÅúÊ≠¢„ÄÇ 
#  
# 
#  
# 
#  Á§∫‰æã 1Ôºö 
# 
#  ËæìÂÖ•Ôºögrid = [[0,6,0],[5,8,7],[0,9,0]]
# ËæìÂá∫Ôºö24
# Ëß£ÈáäÔºö
# [[0,6,0],
#  [5,8,7],
#  [0,9,0]]
# ‰∏ÄÁßçÊî∂ÈõÜÊúÄÂ§öÈªÑÈáëÁöÑË∑ØÁ∫øÊòØÔºö9 -> 8 -> 7„ÄÇ
#  
# 
#  Á§∫‰æã 2Ôºö 
# 
#  ËæìÂÖ•Ôºögrid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
# ËæìÂá∫Ôºö28
# Ëß£ÈáäÔºö
# [[1,0,7],
#  [2,0,6],
#  [3,4,5],
#  [0,3,0],
#  [9,0,20]]
# ‰∏ÄÁßçÊî∂ÈõÜÊúÄÂ§öÈªÑÈáëÁöÑË∑ØÁ∫øÊòØÔºö1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7„ÄÇ
#  
# 
#  
# 
#  ÊèêÁ§∫Ôºö 
# 
#  
#  1 <= grid.length, grid[i].length <= 15 
#  0 <= grid[i][j] <= 100 
#  ÊúÄÂ§ö 25 ‰∏™ÂçïÂÖÉÊ†º‰∏≠ÊúâÈªÑÈáë„ÄÇ 
#  
#  Related Topics Êï∞ÁªÑ ÂõûÊ∫Ø Áü©Èòµ üëç 118 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        max_gold = 0

        def dfs(i, j, gold):
            nonlocal max_gold
            gold += grid[i][j]
            rec = grid[i][j]
            grid[i][j] = 0
            max_gold = max(max_gold, gold)
            for ni, nj in ((i-1,j), (i+1,j), (i,j-1), (i,j+1)):
                if 0<=ni<m and 0<=nj<n and grid[ni][nj]>0:
                    dfs(ni, nj, gold)
            grid[i][j] = rec #ÂõûÊ∫ØÔºåÊääÊåñËøáÁöÑÂùëË°•‰∏äÔºåËøòÂéüÁé∞Âú∫
            return
        for i in range(m):
            for j in range(n):
                if grid[i][j] > 0:
                    dfs(i, j, 0)
        return max_gold
# leetcode submit region end(Prohibit modification and deletion)
